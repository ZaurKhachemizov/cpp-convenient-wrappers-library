#pragma once


//==============================================================================================================================
#include <cws/events.hpp>
#include <catch2/catch.hpp>


//==============================================================================================================================
size_t g_occuredEventIndex = 0;
size_t g_nextEventAIndex   = 1;
size_t g_nextEventBIndex   = 1;


//==============================================================================================================================
struct EventA
{
};


//==============================================================================================================================
struct EventB
{
};


//==============================================================================================================================
enum class CustomPriority
{
    HIGH,
    LOW,
};


//==============================================================================================================================
class Listener
{
public:
    //==========================================================================================================================
    Listener()
    {
        reset();
    }

    //==========================================================================================================================
    void on_event_a(EventA const &)
    {
        occuredEventAIndex_ = g_nextEventAIndex++;
    }

    //==========================================================================================================================
    void on_event_b(EventB const &)
    {
        occuredEventBIndex_ = g_nextEventBIndex++;
    }

    //==========================================================================================================================
    void reset()
    {
        occuredEventAIndex_ = occuredEventBIndex_ = 0;
        g_nextEventAIndex   = g_nextEventBIndex   = 1;
    }

    //==========================================================================================================================
    size_t occured_event_a_index() const
    {
        return occuredEventAIndex_;
    }

    //==========================================================================================================================
    size_t occured_event_b_index() const
    {
        return occuredEventBIndex_;
    }

private:
    size_t occuredEventAIndex_;
    size_t occuredEventBIndex_;
};


//==============================================================================================================================
class CustomDispatcher : public cws::events::Dispatcher<EventA>
{
public:
    void notify_event_occured()
    {
        dispatch(EventA());
    }
};


//==============================================================================================================================
void on_event(EventA const &)
{
    g_occuredEventIndex = g_nextEventAIndex++;
}


//==============================================================================================================================
void reset()
{
    g_occuredEventIndex = 0;
    g_nextEventAIndex   = 1;
}


//==============================================================================================================================
size_t occured_event_index()
{
    return g_occuredEventIndex;
}
